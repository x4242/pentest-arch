#!/usr/bin/env bash

# Description:
# ------------
# Initial config and installation of newly installed Arch.
#
# lastmod: 2019-07-31T22:28:51+02:00
# Change History:
# ---------------
# - 2019-07-29: added sudoers configuration
# - 2019-07-28: created

# String definitions for colored printf output
# [ ERROR ] in light red
# [ INFO  ] in light green
# [ INPUT ] in light yellow
STR_ERROR="[ \e[91mERROR\e[0m ]"
STR_INFO="[ \e[92mINFO\e[0m  ]"
STR_INPUT="[ \e[93mINPUT\e[0m ]"

##########################################
# Check if root / sudo
##########################################
if [ ! "$EUID" -eq 0 ]; then
  printf "%b Run as root.\n" "${STR_ERROR}" >&2
  exit 1
fi


##########################################
# Preperation
##########################################
# enable and stat DHCP client
printf "%b Enabling and starting dhcpcd ...\n" "${STR_INFO}"
systemctl enable dhcpcd
systemctl start dhcpcd

<<<<<<< HEAD
# configure pacman
printf "%b Configuring pacman ...\n" "${STR_INFO}"
=======
# Configure pacman
printf "%b EConfiguring pacman...\n" "${STR_INFO}"
>>>>>>> 4da038fcc6dac0cfd87cc463251a05f6b1155725
sed -i 's/^#Color/Color/' /etc/pacman.conf
sed -i 's/^#TotalDownload/TotalDownload/' /etc/pacman.conf

# Update
pacman -Syyu

# Install 'pacman-contrib' package for 'rankmirrors', optain mirrorlist
# and rank 20 fastest mirrors.
pacman -S --needed --noconfirm pacman-contrib
curl https://www.archlinux.org/mirrorlist/all/https/ -o /tmp/mirrorlist
sed -i 's/^#Server/Server/' /tmp/mirrorlist
printf "%b Ranking top 20 pacman mirrors by speed ...\n" "${STR_INFO}"
rankmirrors -n 20 /tmp/mirrorlist > /tmp/mirrorlist.ranked
cp -f /tmp/mirrorlist.ranked /etc/pacman.d/mirrorlist
rm -f /tmp/mirrorlist /tmp/mirrorlist-ranked
printf "%b Mirrors ranked and saved to /etc/pacman.d/mirrorlist.\n" "${STR_INFO}"

# Allow members of group 'wheel' to execute any command with 'sudo'.
# Check if 'sudo' ist installed and /etc/sudoers present (assuming it is not empty)
printf "%b Checking if sudo is installed...\n" "${STR_INFO}"
which sudo
if [[ $? == 0 && -s /etc/sudoers ]]; then
  printf "%b 'sudo' and /etc/sudoers found. Allowing members of group 'wheel' to execute any command with 'sudo'.\n" "${STR_INFO}"
  sed -i 's/^# %wheel ALL=(ALL) ALL/%wheel ALL=(ALL) ALL/' /etc/sudoers
  exit 0
else
  printf "%b 'sudo' or /etc/sudoers not found or empty, but needed.\n" "${STR_ERROR}" >&2
  printf "%b Install 'sudo' (y/n)? " "${STR_INPUT}"
  read -r yes_no
  case $yes_no in
    [Yy]* )
      pacman -S --needed --noconfirm sudo
      ;;
    *)
      printf "%b Skipping configuration of suoders.\n" "${STR_ERROR}" >&2
      exit 1
      ;;
  esac
fi


##########################################
# System Packages
##########################################
pacman_system_pkgs=(
                    grc
                    htop
                    tmux
                    vim2
                    )
for package in ${pacman_system_pkgs[*]}; do
  pacman -S --needed --noconfirm ${package}
done

##########################################
# Prepare /etc/skel
##########################################
printf "%b Preparing /etc/skel ...\n" "${STR_INFO}"
mkdir /etc/skel/Downloads
cp -f ./skel/bashrc /etc/skel/.bashrc
cp -f ./skel/bash_aliases /etc/skel/.bash_aliases
cp -f ./skel/bash_logout /etc/skel/.bash_logout


##########################################
# Networking
##########################################
pacman_network_pkgs=(
                    cifs-utils
                    dnsutils
                    macchanger
                    net-snmp
                    gnu-netcat
                    nfs-utils
                    nmap
                    openssh
                    openvpn
                    smbclient
                    tcpdump
                    wget
                    whois
                    )
for package in ${pacman_network_pkgs[*]}; do
  pacman -S --needed --noconfirm ${package}
done

systemctl enable rpcbind
systemctl start rpcbind

# set random hostname on each boot
bash ./setrandomhostname/install.sh


##########################################
# Development
##########################################
pacman_dev_pkgs=(
                git
                php
                python
                python-pip
                python2
                python2-pip
                )

for package in ${pacman_dev_pkgs[*]}; do
  pacman -S --needed --noconfirm ${package}
done
