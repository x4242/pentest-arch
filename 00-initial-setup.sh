#!/usr/bin/env bash

# Description:
# ------------
# Initial config and installation of newly installed Arch.
#
# lastmod: 2019-08-07T11:46:22+02:00
# Change History:
# ---------------
# - 2019-09-14: added installation of 'go' (dependency for 'yay')
# - 2019-08-07: minor adaptions
#   - error output if installation of package failed
#   - sudo config after installation (if it was not installed) added
#   - multithread for xz in makepkg.conf
# - 2019-08-05:
#   - added more dev tools
#   - changed dhcpcd enabling to inet connection test
#   - copy .bash_profile for root
# - 2019-07-29: added sudoers configuration
# - 2019-07-28: created

# String definitions for colored printf output
# [ ERROR ] in light red
# [ INFO  ] in light green
# [ INPUT ] in light yellow
STR_ERROR="[ \e[91mERROR\e[0m ]"
STR_INFO="[ \e[92mINFO\e[0m  ]"
STR_INPUT="[ \e[93mINPUT\e[0m ]"

##########################################
# Check if root / sudo
##########################################
if [ "$EUID" -ne 0 ]; then
  printf "%b Run as root.\n" "${STR_ERROR}" >&2
  exit 1
fi


##########################################
# Preperation
##########################################
# test internet connection
ping -q -c 1 -W 1 8.8.8.8 > /dev/null
if [ $? -ne 0 ]; then
  printf "%b No internet connection (dhcpcd enabled?). Aborting." "${STR_ERROR}"
  exit 1
fi

# Configure pacman
printf "%b Configuring pacman...\n" "${STR_INFO}"
sed -i 's/^#Color/Color/' /etc/pacman.conf
sed -i 's/^#TotalDownload/TotalDownload/' /etc/pacman.conf

# enable multithread xz for makepkg
sed -i "s/xz -c -z -/xz -c -z - --threads=0/g" /etc/makepkg.conf

# Update
pacman -Syyu

# Install 'pacman-contrib' package for 'rankmirrors', optain mirrorlist
# and rank 20 fastest mirrors.
pacman -S --needed --noconfirm pacman-contrib
curl https://www.archlinux.org/mirrorlist/all/https/ -o /tmp/mirrorlist
sed -i 's/^#Server/Server/' /tmp/mirrorlist
printf "%b Ranking top 20 pacman mirrors by speed ...\n" "${STR_INFO}"
rankmirrors -n 20 /tmp/mirrorlist > /tmp/mirrorlist.ranked
cp -f /tmp/mirrorlist.ranked /etc/pacman.d/mirrorlist
rm -f /tmp/mirrorlist /tmp/mirrorlist-ranked
printf "%b Mirrors ranked and saved to /etc/pacman.d/mirrorlist.\n" "${STR_INFO}"

# Allow members of group 'wheel' to execute any command with 'sudo'.
# Check if 'sudo' ist installed and /etc/sudoers present (assuming it is not empty)
printf "%b Checking if sudo is installed...\n" "${STR_INFO}"
which sudo
if [[ $? == 0 && -s /etc/sudoers ]]; then
  printf "%b 'sudo' and /etc/sudoers found. Allowing members of group 'wheel' to execute any command with 'sudo'.\n" "${STR_INFO}"
  sed -i 's/^# %wheel ALL=(ALL) ALL/%wheel ALL=(ALL) ALL/' /etc/sudoers
else
  printf "%b 'sudo' or /etc/sudoers not found or empty, but needed.\n" "${STR_ERROR}" >&2
  printf "%b Install 'sudo' (y/n)? " "${STR_INPUT}"
  read -r yes_no
  case $yes_no in
    [Yy]* )
      pacman -S --needed --noconfirm sudo
      if [[ $? -eq 0 && -s /etc/sudoers ]]; then
        sed -i 's/^# %wheel ALL=(ALL) ALL/%wheel ALL=(ALL) ALL/' /etc/sudoers
      else
        printf "%b Something went wrong while instlling 'sudo'.\n" "${STR_ERROR}" >&2
      fi
      ;;
    *)
      printf "%b Skipping configuration of sudoers.\n" "${STR_ERROR}" >&2
      ;;
  esac
fi


##########################################
# System Packages
##########################################
pacman_system_pkgs=(
                    grc
                    htop
                    tmux
                    vim
                    )

for package in ${pacman_system_pkgs[*]}; do
  pacman -S --needed --noconfirm ${package}
  if [ $? -ne 0 ]; then
    printf "%b Installation of package '%b' failed.\n" "${STR_ERROR}" "${package}" >&2
  fi
done

##########################################
# Prepare /etc/skel
##########################################
printf "%b Preparing /etc/skel ...\n" "${STR_INFO}"
mkdir /etc/skel/Downloads
cp -f ./skel/bashrc /etc/skel/.bashrc
cp -f ./skel/bash_aliases /etc/skel/.bash_aliases
cp -f ./skel/bash_logout /etc/skel/.bash_logout

cp -f ./skel/bashrc /root/.bashrc
cp -f ./skel/bash_aliases /root/.bash_aliases
cp -f ./skel/bash_logout /root/.bash_logout
cp -f ./skel/.bash_profile /root/.bash_profile

##########################################
# Networking
##########################################
pacman_network_pkgs=(
                    cifs-utils
                    dnsutils
                    macchanger
                    net-snmp
                    gnu-netcat
                    nfs-utils
                    nmap
                    openssh
                    openvpn
                    smbclient
                    tcpdump
                    wget
                    whois
                    )

for package in ${pacman_network_pkgs[*]}; do
  pacman -S --needed --noconfirm ${package}
  if [ $? -ne 0 ]; then
    printf "%b Installation of package '%b' failed.\n" "${STR_ERROR}" "${package}" >&2
  fi
done

systemctl enable rpcbind
systemctl start rpcbind

# set random hostname on each boot
bash ./setrandomhostname/install.sh


##########################################
# Development
##########################################
pacman_dev_pkgs=(
                gdb
                git
                go
                ltrace
                php
                python
                python-pip
                python2
                python2-pip
                radare2
                strace
                )

for package in ${pacman_dev_pkgs[*]}; do
  pacman -S --needed --noconfirm ${package}
  if [ $? -ne 0 ]; then
    printf "%b Installation of package '%b' failed.\n" "${STR_ERROR}" "${package}" >&2
  fi
done

printf "%b Do not forget to create a non-root user if not already done.\n" "${STR_INFO}"

exit 0
